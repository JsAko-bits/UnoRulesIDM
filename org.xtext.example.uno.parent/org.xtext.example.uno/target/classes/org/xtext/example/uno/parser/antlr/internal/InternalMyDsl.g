/*
 * generated by Xtext 2.23.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.uno.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.uno.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.uno.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getRulesRuleParserRuleCall_0());
			}
			lv_rules_0_0=ruleRule
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"rules",
					lv_rules_0_0,
					"org.xtext.example.uno.MyDsl.Rule");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Objectif: '
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getObjectifKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getObjectifObjectifEnumRuleCall_1_0());
				}
				lv_objectif_1_0=ruleObjectif
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"objectif",
						lv_objectif_1_0,
						"org.xtext.example.uno.MyDsl.Objectif");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getJoueurJoueurEnumRuleCall_2_0());
				}
				lv_joueur_2_0=ruleJoueur
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"joueur",
						lv_joueur_2_0,
						"org.xtext.example.uno.MyDsl.Joueur");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='joueurs'
		{
			newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getJoueursKeyword_3());
		}
		otherlv_4='R\u00E8glement {'
		{
			newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getRGlementKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getRegleRegleEnumRuleCall_5_0());
				}
				lv_regle_5_0=ruleRegle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					add(
						$current,
						"regle",
						lv_regle_5_0,
						"org.xtext.example.uno.MyDsl.Regle");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Rule Objectif
ruleObjectif returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Uno Challenge'
			{
				$current = grammarAccess.getObjectifAccess().getUnoChallengeEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getObjectifAccess().getUnoChallengeEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Classique'
			{
				$current = grammarAccess.getObjectifAccess().getClassiqueEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getObjectifAccess().getClassiqueEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Regle
ruleRegle returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Jouer une carte m\u00EAme couleur ou m\u00EAme nombre'
			{
				$current = grammarAccess.getRegleAccess().getBasiqueEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRegleAccess().getBasiqueEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Possibilit\u00E9 de jouer 2 cartes identiques simultan\u00E9ment'
			{
				$current = grammarAccess.getRegleAccess().getCarteIdentiqueEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRegleAccess().getCarteIdentiqueEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Possibilit\u00E9 de jouer imm\u00E9diatement une carte de m\u00EAme couleur'
			{
				$current = grammarAccess.getRegleAccess().getSuiteEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRegleAccess().getSuiteEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Possibilit\u00E9 de cumuler la carte +2'
			{
				$current = grammarAccess.getRegleAccess().getCumulEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getRegleAccess().getCumulEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule Joueur
ruleJoueur returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='2'
			{
				$current = grammarAccess.getJoueurAccess().getDeuxEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getJoueurAccess().getDeuxEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Plus de deux'
			{
				$current = grammarAccess.getJoueurAccess().getPlusDeuxEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getJoueurAccess().getPlusDeuxEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
