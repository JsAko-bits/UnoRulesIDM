/*
 * generated by Xtext 2.23.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.uno.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.uno.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.uno.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getRulesAssignment()); }
		(rule__Model__RulesAssignment)*
		{ after(grammarAccess.getModelAccess().getRulesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getGroup()); }
		(rule__Rule__Group__0)
		{ after(grammarAccess.getRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Objectif
ruleObjectif
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectifAccess().getAlternatives()); }
		(rule__Objectif__Alternatives)
		{ after(grammarAccess.getObjectifAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Regle
ruleRegle
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegleAccess().getAlternatives()); }
		(rule__Regle__Alternatives)
		{ after(grammarAccess.getRegleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Joueur
ruleJoueur
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJoueurAccess().getAlternatives()); }
		(rule__Joueur__Alternatives)
		{ after(grammarAccess.getJoueurAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Objectif__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectifAccess().getUnoChallengeEnumLiteralDeclaration_0()); }
		('Uno Challenge')
		{ after(grammarAccess.getObjectifAccess().getUnoChallengeEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getObjectifAccess().getClassiqueEnumLiteralDeclaration_1()); }
		('Classique')
		{ after(grammarAccess.getObjectifAccess().getClassiqueEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Regle__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRegleAccess().getBasiqueEnumLiteralDeclaration_0()); }
		('Jouer une carte m\u00EAme couleur ou m\u00EAme nombre')
		{ after(grammarAccess.getRegleAccess().getBasiqueEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getRegleAccess().getCarteIdentiqueEnumLiteralDeclaration_1()); }
		('Possibilit\u00E9 de jouer 2 cartes identiques simultan\u00E9ment')
		{ after(grammarAccess.getRegleAccess().getCarteIdentiqueEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getRegleAccess().getSuiteEnumLiteralDeclaration_2()); }
		('Possibilit\u00E9 de jouer imm\u00E9diatement une carte de m\u00EAme couleur')
		{ after(grammarAccess.getRegleAccess().getSuiteEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getRegleAccess().getCumulEnumLiteralDeclaration_3()); }
		('Possibilit\u00E9 de cumuler la carte +2')
		{ after(grammarAccess.getRegleAccess().getCumulEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joueur__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJoueurAccess().getDeuxEnumLiteralDeclaration_0()); }
		('2')
		{ after(grammarAccess.getJoueurAccess().getDeuxEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getJoueurAccess().getPlusDeuxEnumLiteralDeclaration_1()); }
		('Plus de deux')
		{ after(grammarAccess.getJoueurAccess().getPlusDeuxEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getObjectifKeyword_0()); }
	'Objectif: '
	{ after(grammarAccess.getRuleAccess().getObjectifKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getObjectifAssignment_1()); }
	(rule__Rule__ObjectifAssignment_1)
	{ after(grammarAccess.getRuleAccess().getObjectifAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getJoueurAssignment_2()); }
	(rule__Rule__JoueurAssignment_2)
	{ after(grammarAccess.getRuleAccess().getJoueurAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__3__Impl
	rule__Rule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getJoueursKeyword_3()); }
	'joueurs'
	{ after(grammarAccess.getRuleAccess().getJoueursKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__4__Impl
	rule__Rule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getRGlementKeyword_4()); }
	'R\u00E8glement {'
	{ after(grammarAccess.getRuleAccess().getRGlementKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__5__Impl
	rule__Rule__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getRuleAccess().getRegleAssignment_5()); }
		(rule__Rule__RegleAssignment_5)
		{ after(grammarAccess.getRuleAccess().getRegleAssignment_5()); }
	)
	(
		{ before(grammarAccess.getRuleAccess().getRegleAssignment_5()); }
		(rule__Rule__RegleAssignment_5)*
		{ after(grammarAccess.getRuleAccess().getRegleAssignment_5()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__RulesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getRulesRuleParserRuleCall_0()); }
		ruleRule
		{ after(grammarAccess.getModelAccess().getRulesRuleParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ObjectifAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getObjectifObjectifEnumRuleCall_1_0()); }
		ruleObjectif
		{ after(grammarAccess.getRuleAccess().getObjectifObjectifEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__JoueurAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getJoueurJoueurEnumRuleCall_2_0()); }
		ruleJoueur
		{ after(grammarAccess.getRuleAccess().getJoueurJoueurEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__RegleAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getRegleRegleEnumRuleCall_5_0()); }
		ruleRegle
		{ after(grammarAccess.getRuleAccess().getRegleRegleEnumRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
